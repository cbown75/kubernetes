# Default values for traefik
# This is a YAML-formatted file.

# Global configuration
global:
  # -- Enable this if you want debug mode
  debug: false
  # -- Enable this if you want access logs
  accessLog: true
  # -- Enable this if you want traefik logs
  traefikLog: true

# Deployment configuration
deployment:
  enabled: true
  kind: Deployment # Can be Deployment or DaemonSet
  replicas: 2

  # Pod Disruption Budget
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 1

# Image configuration
image:
  repository: traefik
  tag: "v3.0.0"
  pullPolicy: IfNotPresent

# Traefik configuration
traefik:
  # -- Enable service discovery
  serviceDiscovery:
    enabled: true
    # Watch all namespaces by default
    watchAllNamespaces: true
    # Specific namespaces to watch (if watchAllNamespaces is false)
    watchNamespaces: []

  # -- Additional configuration for traefik
  additionalConfiguration:
    # Enable Kubernetes Ingress controller
    providers:
      kubernetes:
        # Watch Ingress resources
        ingressClass: traefik
        allowCrossNamespace: true
        allowExternalNameServices: true

      # Enable Kubernetes CRD provider
      kubernetescrd:
        allowCrossNamespace: true
        allowExternalNameServices: true

      # Enable service discovery by labels/annotations
      kubernetesgateway:
        experimentalChannel: true

    # Entry points configuration
    entryPoints:
      web:
        address: ":80"
        http:
          redirections:
            entrypoint:
              to: websecure
              scheme: https
              permanent: true
      websecure:
        address: ":443"
        http:
          tls:
            options: default
      traefik:
        address: ":8080"
      metrics:
        address: ":8082"

    # Certificate resolvers
    certificatesResolvers:
      letsencrypt:
        acme:
          email: "admin@yourdomain.com" # Update this!
          storage: /data/acme.json
          caServer: https://acme-v02.api.letsencrypt.org/directory
          # DNS Challenge for Cloudflare
          dnsChallenge:
            provider: cloudflare
            delayBeforeCheck: 10
            resolvers:
              - "1.1.1.1:53"
              - "8.8.8.8:53"
          # Uncomment for HTTP challenge instead (if not using Cloudflare proxy)
          # tlsChallenge: {}

    # Metrics configuration
    metrics:
      prometheus:
        addEntryPointsLabels: true
        addServicesLabels: true
        addRoutersLabels: true

    # API and Dashboard
    api:
      dashboard: true
      debug: true

    # Ping endpoint
    ping:
      entryPoint: traefik

# Service configuration
service:
  enabled: true
  type: LoadBalancer # Change to NodePort for on-premises/Talos
  annotations: {}
  labels: {}
  spec:
    # externalTrafficPolicy: Local  # Preserve source IPs
    loadBalancerSourceRanges: []
  ports:
    web:
      port: 80
      expose: true
      protocol: TCP
    websecure:
      port: 443
      expose: true
      protocol: TCP
      tls:
        enabled: true
    traefik:
      port: 8080
      expose: false # Dashboard access
      protocol: TCP

# Persistence for ACME certificates
persistence:
  enabled: true
  existingClaim: ""
  accessMode: ReadWriteOnce
  size: 128Mi
  storageClass: ""
  path: /data
  annotations: {}

# RBAC configuration
rbac:
  enabled: true

# Service Account
serviceAccount:
  create: true
  name: ""
  annotations: {}

# Security Context
podSecurityContext:
  fsGroup: 65532

securityContext:
  capabilities:
    drop:
      - ALL
    add:
      - NET_BIND_SERVICE
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

# Resource limits
resources:
  requests:
    cpu: 100m
    memory: 50Mi
  limits:
    cpu: 300m
    memory: 150Mi

# Node selection
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - traefik
          topologyKey: kubernetes.io/hostname

# Health checks
livenessProbe:
  httpGet:
    path: /ping
    port: traefik
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ping
    port: traefik
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 1

# Monitoring
metrics:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      path: /metrics
      namespace: ""
      additionalLabels:
        release: prometheus

# Logs
logs:
  general:
    level: INFO
  access:
    enabled: true
    format: json

# Sealed Secrets for sensitive configuration
sealedSecrets:
  enabled: false

  # Cloudflare API credentials for DNS challenge
  cloudflare:
    create: false
    # Sealed Cloudflare API token or email/key - generate with kubeseal
    # For API Token (recommended):
    sealedApiToken: ""
    # For Global API Key (legacy):
    sealedEmail: ""
    sealedApiKey: ""

  # Dashboard credentials (if basic auth enabled)
  dashboard:
    create: false
    username: "admin"
    # Sealed password - generate with kubeseal
    # Example: echo -n "admin:$(htpasswd -nb admin yourpassword | cut -d: -f2)" | kubeseal --raw --scope cluster-wide
    sealedPassword: ""

  # TLS certificates (if not using Let's Encrypt)
  tls:
    create: false
    certificates: {}

# Traefik Dashboard configuration
dashboard:
  enabled: true
  # Expose dashboard via ingress
  ingress:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      traefik.ingress.kubernetes.io/router.middlewares: traefik-auth@kubernetescrd
    host: traefik.yourdomain.com # Update this!

  # Basic auth middleware for dashboard
  auth:
    enabled: false # Set to true and configure sealedSecrets if needed

# Default middlewares
middleware:
  # Default redirect to HTTPS
  redirect:
    enabled: true

  # Default security headers
  headers:
    enabled: true

  # Rate limiting
  rateLimit:
    enabled: false
    average: 100
    burst: 50

# IngressClass configuration
ingressClass:
  enabled: true
  isDefaultClass: true

# Service discovery labels and annotations to watch for
serviceDiscovery:
  # Labels to watch for automatic service exposure
  labels:
    expose: "traefik.expose"
    port: "traefik.port"
    protocol: "traefik.protocol"
    entrypoint: "traefik.entrypoint"
    router: "traefik.router"
    middleware: "traefik.middleware"

  # Annotations to watch for
  annotations:
    enabled: "traefik.ingress.kubernetes.io/router.entrypoints"
    tls: "traefik.ingress.kubernetes.io/router.tls"
    middlewares: "traefik.ingress.kubernetes.io/router.middlewares"
    rule: "traefik.ingress.kubernetes.io/router.rule"

# Additional labels and annotations for all resources
commonLabels: {}
commonAnnotations: {}

# Talos-specific optimizations
talos:
  enabled: false
  # If using Talos, set this to true and adjust service type to NodePort
  nodeSelector:
    kubernetes.io/os: linux
  securityContext:
    runAsUser: 65532
    runAsGroup: 65532

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

installCRDs: true
