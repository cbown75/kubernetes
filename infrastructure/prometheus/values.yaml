global:
  imageRegistry: ""
  storageClass: synology-holocron-fast

prometheus:
  replicaCount: 1

  deploymentStrategy:
    type: Recreate

  image:
    registry: docker.io
    repository: prom/prometheus
    tag: v2.51.2
    pullPolicy: IfNotPresent

  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 65534
    seccompProfile:
      type: RuntimeDefault

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 65534

  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 500m
      memory: 2Gi

  probes:
    liveness:
      httpGet:
        path: /-/healthy
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 10
    readiness:
      httpGet:
        path: /-/ready
        port: http
      initialDelaySeconds: 30
      timeoutSeconds: 10

  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 50Gi
    storageClass: synology-holocron-fast
    annotations: {}

  podDisruptionBudget:
    enabled: false
  config:
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files: []

    scrape_configs:
      - job_name: "prometheus"
        static_configs:
          - targets: ["localhost:9090"]

      - job_name: "kubernetes-apiservers"
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_namespace,
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: default;kubernetes;https

      - job_name: "kubernetes-nodes"
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: "kubernetes-cadvisor"
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: "kubernetes-service-endpoints"
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [
                __address__,
                __meta_kubernetes_service_annotation_prometheus_io_port,
              ]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      - job_name: "kubernetes-services"
        kubernetes_sd_configs:
          - role: service
        metrics_path: /probe
        params:
          module: [http_2xx]
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter.example.com:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      - job_name: "kubernetes-ingresses"
        kubernetes_sd_configs:
          - role: ingress
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [
                __meta_kubernetes_ingress_scheme,
                __address__,
                __meta_kubernetes_ingress_path,
              ]
            regex: (.+);(.+);(.+)
            replacement: ${1}://${2}${3}
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter.example.com:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_ingress_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_ingress_name]
            target_label: kubernetes_name

      - job_name: "kubernetes-pods"
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels:
              [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  extraArgs:
    - --storage.tsdb.retention.time=15d
    - --storage.tsdb.retention.size=45GB
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --web.enable-lifecycle
    - --web.enable-admin-api
    - --web.route-prefix=/
    - --storage.tsdb.wal-compression

service:
  type: ClusterIP
  port: 9090
  targetPort: 9090
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
  labels: {}

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

rbac:
  create: true
  extraRules: []

ingress:
  enabled: true
  className: "traefik"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-cloudflare"
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.middlewares: "monitoring-prometheus-auth@kubernetescrd"
    traefik.ingress.kubernetes.io/router.tls: "true"
  hosts:
    - host: prometheus.home.cwbtech.net
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: prometheus-tls
      hosts:
        - prometheus.home.cwbtech.net

serviceMonitor:
  enabled: false
  namespace: ""
  interval: 30s
  scrapeTimeout: 10s
  labels:
    app.kubernetes.io/part-of: monitoring-stack
  annotations: {}

sealedSecrets:
  enabled: true
  secrets:
    prometheus-basic-auth:
      auth: "AgCvwFftjWB+/BxnGRMzRtJZPqbA6DdXnGK/j2WxHCHGfVGuIeyQ05+nep9cQwTKfT/V81CB1GaGqUFs68FqHaFEHv4krH0JPgxgHxMjjIsRKZJYMG1Bpg2RxIlwPKiMoAY5a2VPGk+STnwNMwCD8f3QpyEu1wX7gSA7SX7NEdf3XdQJmXLb7lRC1N/erJLoDzNewOeH759u/r4Wkebl3m8IHeKNs6RkbD7PgQhnWZuLHudIxH4J1qQ1c8/klOhKuKdvHV9+v458eDscdzkKd2rsLgtXvw0zg43JxWKy6PpUaWWJKt5gOzbAKyAdkU942A3bfxot4FfTotoFIOGFJ3FlENX2wHXU0pKHYmBxhO+LqW3DbeksVMoHmX33NrgvvjMMe3waLn11UusOdNpZen/GqT54kVEYoKJ1GBySb5aiJRtONSGQC0owrYm6Y6djiPNEwifh3X4dnATqx9hA/UfcXE6ZdW5k8ZANfalDbGAgoNOpvO6Cs5bba1/ShFQuoelM3T+5bpdUBNnvgny2jXAQMy1N4gQY6cWQonUAyTMTOTg8fm7rAN4C7nanf5q12C7MCXoBRgopbQLG8pPkYHRFs06ViZ7FIjh1AaDqnpmUCQCY/7f0FukpownvQzsWRtEKUEVNQxpG2Lc303wRBA0BK5wK5Nq3oJlP+Bwj1Hv1vi+pojo3M7/tEemZlIWy310pd+FXW1SWxmXDnqnddlNaiD3rrncMUKhtZkTscpFKnE4+BHvMFInqKtl9"

networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: traefik-system
      ports:
        - protocol: TCP
          port: 9090
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

podLabels: {}
extraVolumes: []
extraVolumeMounts: []
extraContainers: []
initContainers: []
env: []
nameOverride: ""
fullnameOverride: ""
