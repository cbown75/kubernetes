---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: alloy
    app.kubernetes.io/part-of: monitoring-stack
data:
  config.alloy: |
    // Kubernetes service discovery for pods
    discovery.kubernetes "pods" {
      role = "pod"
    }

    // Kubernetes service discovery for nodes (for metrics)
    discovery.kubernetes "nodes" {
      role = "node"
    }

    // Log collection from Kubernetes pods (replaces Promtail)
    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pods.targets

      // Only collect logs from pods that have containers
      rule {
        source_labels = ["__meta_kubernetes_pod_container_id"]
        regex         = ".+"
        action        = "keep"
      }

      // Extract controller name for app labeling  
      rule {
        source_labels = ["__meta_kubernetes_pod_controller_name"]
        regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
        target_label  = "__tmp_controller_name"
        action        = "replace"
      }

      // Set app label from various sources
      rule {
        source_labels = [
          "__meta_kubernetes_pod_label_app_kubernetes_io_name",
          "__meta_kubernetes_pod_label_app", 
          "__tmp_controller_name",
          "__meta_kubernetes_pod_name"
        ]
        regex         = "(^[0-9a-z-.]+|;[0-9a-z-.]+|;[0-9a-z-.]+|;[0-9a-z-.]+).*"
        target_label  = "app"
        action        = "replace"
      }

      // Set version label
      rule {
        source_labels = [
          "__meta_kubernetes_pod_label_app_kubernetes_io_version",
          "__meta_kubernetes_pod_label_version"
        ]
        regex         = "(^[0-9a-z-.]+|;[0-9a-z-.]+).*"
        target_label  = "version"
        action        = "replace"
      }

      // Set namespace
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
        action        = "replace"
      }

      // Set pod name
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
        action        = "replace"
      }

      // Set container name
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
        action        = "replace"
      }

      // Construct log path for containerd/Talos
      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        target_label  = "__path__"
        separator     = "/"
        replacement   = "/var/log/pods/*${1}/*.log"
        action        = "replace"
      }

      // Drop system namespaces to reduce noise
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        regex         = "kube-system|flux-system|metallb-system"
        action        = "drop"
      }
    }

    // Log scraping with CRI format parsing (Talos/containerd compatible)
    loki.source.kubernetes "pod_logs" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pod_logs.receiver]
    }

    // Process logs (equivalent to Promtail pipeline stages)
    loki.process "pod_logs" {
      // Parse CRI format logs (containerd/Talos)
      stage.cri {}
      
      forward_to = [loki.write.loki.receiver]
    }

    // Send logs to Loki
    loki.write "loki" {
      endpoint {
        url = "http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push"
      }
    }

    // Node exporter metrics collection (replaces node-exporter)
    prometheus.exporter.unix "node" {
      include_exporter_metrics = true
      
      // Match your current node-exporter disabled collectors
      disable_collectors = [
        "wifi",     // Not needed in k8s
        "hwmon",    // Not needed in k8s
      ]
      
      // Match your current filesystem exclusions
      filesystem {
        mount_points_exclude = "^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)"
      }
      
      // Match your current netclass exclusions
      netclass {
        ignored_devices = "^(veth.*)$"
      }
    }

    // Scrape node metrics and send to Prometheus
    prometheus.scrape "node_exporter" {
      targets    = prometheus.exporter.unix.node.targets
      forward_to = [prometheus.remote_write.prometheus.receiver]
      
      // Match your current node-exporter scrape interval
      scrape_interval = "30s"
      scrape_timeout  = "10s"
      metrics_path    = "/metrics"
      
      // Add node name as instance label (like your current setup)
      clustering {
        enabled = false
      }
    }

    // Alloy self-monitoring metrics
    prometheus.scrape "alloy" {
      targets = [{
        __address__ = "127.0.0.1:12345",
      }]
      forward_to      = [prometheus.remote_write.prometheus.receiver]
      scrape_interval = "15s"
      metrics_path    = "/metrics"
    }

    // Send metrics to Prometheus
    prometheus.remote_write "prometheus" {
      endpoint {
        url = "http://prometheus.monitoring.svc.cluster.local:9090/api/v1/write"
      }
    }
