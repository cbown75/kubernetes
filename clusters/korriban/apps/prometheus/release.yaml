apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    app.kubernetes.io/part-of: monitoring-stack
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/warn: privileged
    network-policy/monitoring: "true"

---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: monitoring-stack
spec:
  interval: 10m
  timeout: 10m
  chart:
    spec:
      chart: prometheus
      version: ">=25.0.0"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 5m

  install:
    createNamespace: false
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
      remediateLastFailure: true

  rollback:
    cleanupOnFail: true
    force: true
    recreate: true

  dependsOn:
    - name: traefik
      namespace: traefik-system

  values:
    # Prometheus server configuration
    server:
      # Image configuration
      image:
        repository: prom/prometheus
        tag: "v2.51.2"
        pullPolicy: IfNotPresent

      # Resource limits
      resources:
        limits:
          cpu: 2000m
          memory: 4Gi
        requests:
          cpu: 500m
          memory: 2Gi

      # Persistence configuration
      persistentVolume:
        enabled: true
        storageClass: "synology-holocron-fast"
        accessModes:
          - ReadWriteOnce
        size: 50Gi

      # Retention settings
      retention: "15d"
      retentionSize: "45GB"

      # Global configuration
      global:
        scrape_interval: 30s
        scrape_timeout: 10s
        evaluation_interval: 30s
        external_labels:
          cluster: "korriban"
          environment: "production"

      # Security context
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534

      # Pod security context
      podSecurityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      # Container security context
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 65534

      # Service configuration
      service:
        type: ClusterIP
        servicePort: 9090
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9090"
          prometheus.io/path: "/metrics"

      # Ingress configuration
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-cloudflare
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.tls: "true"
        hosts:
          - prometheus.home.cwbtech.net
        tls:
          - secretName: prometheus-tls
            hosts:
              - prometheus.home.cwbtech.net

      # Pod annotations
      podAnnotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"

    # ServiceAccount configuration
    serviceAccounts:
      server:
        create: true
        name: prometheus
        annotations: {}

    # RBAC configuration
    rbac:
      create: true

    # Network policy
    networkPolicy:
      enabled: true

    # Prometheus configuration file
    serverFiles:
      prometheus.yml:
        global:
          scrape_interval: 30s
          scrape_timeout: 10s
          evaluation_interval: 30s
          external_labels:
            cluster: "korriban"
            environment: "production"

        rule_files:
          - "/etc/prometheus/rules/*.yml"

        scrape_configs:
          - job_name: prometheus
            static_configs:
              - targets:
                  - localhost:9090

          - job_name: "kubernetes-apiservers"
            kubernetes_sd_configs:
              - role: endpoints
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - source_labels:
                  [
                    __meta_kubernetes_namespace,
                    __meta_kubernetes_service_name,
                    __meta_kubernetes_endpoint_port_name,
                  ]
                action: keep
                regex: default;kubernetes;https

          # Node Exporter - discover via node IPs
          - job_name: "node-exporter"
            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - source_labels: [__meta_kubernetes_node_address_InternalIP]
                target_label: __address__
                replacement: "${1}:9100"
              - source_labels: [__meta_kubernetes_node_name]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)

          # Services with Prometheus annotations
          - job_name: "kubernetes-services"
            kubernetes_sd_configs:
              - role: service
            relabel_configs:
              - source_labels:
                  [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels:
                  [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels:
                  [
                    __address__,
                    __meta_kubernetes_service_annotation_prometheus_io_port,
                  ]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: ${1}:${2}
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: kubernetes_service_name

          # cAdvisor metrics (container metrics from kubelet)
          - job_name: "kubernetes-cadvisor"
            kubernetes_sd_configs:
              - role: node
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

          # Kubernetes nodes (kubelet metrics)
          - job_name: "kubernetes-nodes"
            kubernetes_sd_configs:
              - role: node
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/${1}/proxy/metrics

          # Pods with Prometheus annotations
          - job_name: "kubernetes-pods"
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels:
                  [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels:
                  [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels:
                  [
                    __address__,
                    __meta_kubernetes_pod_annotation_prometheus_io_port,
                  ]
                action: replace
                target_label: __address__
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: ${1}:${2}
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: kubernetes_namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: kubernetes_pod_name

    # Disable components we don't need (you have separate charts)
    alertmanager:
      enabled: false

    kube-state-metrics:
      enabled: false

    prometheus-node-exporter:
      enabled: false

    prometheus-pushgateway:
      enabled: false

    # No extra volumes or secrets needed
    extraSecretMounts: []
